byte P[] = { 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x40, 0x40 };
byte R[] = { 0x78, 0x44, 0x44, 0x78, 0x70, 0x58, 0x4C, 0x46 };
byte O[] = { 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C };
byte M[] = { 0x66, 0x7E, 0x5A, 0x42, 0x42, 0x42, 0x42, 0x42 };
byte E[] = { 0x7C, 0x40, 0x40, 0x78, 0x78, 0x40, 0x40, 0x7C };
byte T[] = { 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 };
byte C[] = { 0x7c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C };
byte N[] = { 0x42, 0x62, 0x72, 0x5A, 0x4E, 0x46, 0x42, 0x42 };
byte dot[]={ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06 };
byte sp[]= { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };



  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // Char ( )
  {0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00}, // Char (!)
  {0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00}, // Char (")
  {0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00}, // Char (#)
  {0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00}, // Char ($)
  {0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00}, // Char (%)
  {0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00}, // Char (&)
  {0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00}, // Char (')
  {0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00}, // Char (()
  {0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00}, // Char ())
  {0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00}, // Char (*)
  {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00}, // Char (+)
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30}, // Char (,)
  {0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00}, // Char (-)
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00}, // Char (.)
  {0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00}, // Char (/)
  {0x38, 0x6C, 0xC6, 0xD6, 0xC6, 0x6C, 0x38, 0x00}, // Char (0)
  {0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00}, // Char (1)
  {0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x66, 0xFE, 0x00}, // Char (2)
  {0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00}, // Char (3)
  {0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00}, // Char (4)
  {0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00}, // Char (5)
  {0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00}, // Char (6)
  {0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00}, // Char (7)
  {0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00}, // Char (8)
  {0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00}, // Char (9)
  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00}, // Char (:)
  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30}, // Char (;)
  {0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00}, // Char (<)
  {0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00}, // Char (=)
  {0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00}, // Char (>)
  {0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00}, // Char (?)
  {0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00}, // Char (@)
  {0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00}, // Char (A)
  {0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00}, // Char (B)
  {0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00}, // Char (C)
  {0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00}, // Char (D)
  {0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00}, // Char (E)
  {0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00}, // Char (F)
  {0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00}, // Char (G)
  {0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00}, // Char (H)
  {0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // Char (I)
  {0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00}, // Char (J)
  {0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00}, // Char (K)
  {0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00}, // Char (L)
  {0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00}, // Char (M)
  {0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00}, // Char (N)
  {0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00}, // Char (O)
  {0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00}, // Char (P)
  {0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xCE, 0x7C, 0x0E}, // Char (Q)
  {0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00}, // Char (R)
  {0x3C, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x3C, 0x00}, // Char (S)
  {0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00}, // Char (T)
  {0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00}, // Char (U)
  {0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00}, // Char (V)
  {0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00}, // Char (W)
  {0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00}, // Char (X)
  {0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00}, // Char (Y)
  {0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00}, // Char (Z)
  {0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00}, // Char ([)
  {0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00}, // Char (\)
  {0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00}, // Char (])
  {0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00}, // Char (^)
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF}, // Char (_)
  {0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00}, // Char (`)
  {0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00}, // Char (a)
  {0xE0, 0x60, 0x7C, 0x66, 0x66, 0x66, 0xDC, 0x00}, // Char (b)
  {0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00}, // Char (c)
  {0x1C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00}, // Char (d)
  {0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00}, // Char (e)
  {0x3C, 0x66, 0x60, 0xF8, 0x60, 0x60, 0xF0, 0x00}, // Char (f)
  {0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8}, // Char (g)
  {0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00}, // Char (h)
  {0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00}, // Char (i)
  {0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C}, // Char (j)
  {0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00}, // Char (k)
  {0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // Char (l)
  {0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0x00}, // Char (m)
  {0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00}, // Char (n)
  {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00}, // Char (o)
  {0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0}, // Char (p)
  {0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E}, // Char (q)
  {0x00, 0x00, 0xDC, 0x76, 0x60, 0x60, 0xF0, 0x00}, // Char (r)
  {0x00, 0x00, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x00}, // Char (s)
  {0x30, 0x30, 0xFC, 0x30, 0x30, 0x36, 0x1C, 0x00}, // Char (t)
  {0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00}, // Char (u)
  {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00}, // Char (v)
  {0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00}, // Char (w)
  {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC}, // Char (y)
  {0x00, 0x00, 0x7E, 0x4C, 0x18, 0x32, 0x7E, 0x00}, // Char (z)
  {0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00}, // Char ({)
  {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00}, // Char (|)
  {0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00}, // Char (})
  {0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // Char (~)
 void setup()                                        
 {   
    pinMode(2, OUTPUT);
    pinMode(3, OUTPUT);
    pinMode(4, OUTPUT);
    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(12, OUTPUT);
    pinMode(13, OUTPUT);
    pinMode(30, OUTPUT);
    pinMode(31, OUTPUT);
    pinMode(32, OUTPUT);
    pinMode(33, OUTPUT);     
    Serial.begin(9600);
 }


bool GetBit( byte N, int pos)
   {                 // pos = 7 6 5 4 3 2 1 0
       int b = N >> pos ;         // Shift bits
       b = b & 1 ;                // coger solo el ultimo bit
       return b ;
   }
   
   void Clear()
   {
      for (int j=2; j<10; j++)  // Valores de los pines de columna
        digitalWrite(j, HIGH);     // Todos apagados
      
      for (int k= 10 ; k<18 ; k++)
      {
        int fila = k;
        if (k>13)
        {
             fila = k + 16;         
        }   

        digitalWrite(fila, LOW);    // Todas las filas cortadas   
      }
//      delay(2000);
   }

byte Selecciona( char c, byte fil)
   {
       if ( c == 'P')          return(P[fil]) ;
       if ( c == 'R')          return( R[fil]) ;
       if ( c == 'O')          return( O[fil]);
       if ( c == 'M')          return( M[fil]);
       if ( c == 'E')          return( E[fil]);
       if ( c == 'T')          return( T[fil]);
       if ( c == 'C')          return( C[fil]);
       if ( c == 'N')          return( N[fil]);
       if ( c == '.')          return( dot[fil]);
       if ( c == ' ')          return( sp[fil]);
   }


   void SetChar(char p)
   {
      Clear();
       
      for (int fil = 0; fil <8 ; fil++)
      {
          int fila = fil + 10;
        
          if (fila > 13)
          {
            fila = fila + 16;
          }

          Serial.print("fila: " + fila);
          Serial.println();
              
          digitalWrite( fila, HIGH) ; // Activamos la fila para el barrido
          byte F = Selecciona( p, fil);
          
          for (int col =7; col >= 0 ; col--)
          {
            digitalWrite(8-col, HIGH);   //Bajamos la columna
            bool b = GetBit(F, col)  ;

           // Serial.print("el valor de b : " + b);
           // Serial.println();
           //         delay(2000);
            if (b)   //Levantamos la columna, con su pin
              digitalWrite( 9 - col  ,LOW); 
            else
              digitalWrite( 9 - col  ,HIGH); // Si 0, apagamos
          }
          
          digitalWrite( fila , LOW) ;   // Apagamos fila antes de salir
      }
   }
   



void loop()
   {
       String s = "PROMETEC.NET  " ;
       int l = s.length();          // Calcula la longitus de s
       for ( int n = 0; n< l; n++ )
          {
              long t = millis();
              char c = s[n];

              Serial.print(c);
              Serial.println();
              while ( millis()< t+ 400)
              SetChar(c);
          }
   }




/*
void loop() 
   {
      Clear();
      for (int fil = 0; fil <8 ; fil++)
         {
          
            int fila = fil + 10;
        
            if (fila > 13)
            {
              fila = fila + 16;
            }
          
             digitalWrite( fila , HIGH) ; // Activamos la fila para el barrido
             byte F = P[fil] ;
 
             for (int col =7; col >= 0 ; col--)
               {
                  bool b = GetBit(F, col)  ;
                  if (b)
                      digitalWrite( 9 - col  ,LOW); //Levantamos la columna
                   else
                      digitalWrite( 9 - col  ,HIGH); // Si 0, apagamos
                }                                   
             digitalWrite( fila , LOW) ; // Apagamos fila antes de salir
         }
   }


*/
/*
void loop()
   {
       for (int fil = 0; fil <8 ; fil++)
          {
              byte F = P[fil] ;
              for (int col =7; col >= 0 ; col--)
                 {
                     bool b = GetBit(F, col)  ;
                     Serial.print(b);
                     Serial.print(",");
                 }
              Serial.println();
          }
       Serial.println("----------------------");
                           delay(2000);
   }

 */
